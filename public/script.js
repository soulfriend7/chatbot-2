class BankAssistant {
    constructor() {
        this.socket = io();
        this.sessionId = null;
        this.isRecording = false;
        this.mediaRecorder = null;
        this.audioChunks = [];
        this.userProfile = {
            income: 0,
            expenses: [],
            goals: [],
            riskTolerance: 'conservative'
        };
        this.charts = {};
        
        this.initializeElements();
        this.setupEventListeners();
        this.initializeChat();
        this.loadSampleData();
    }

    initializeElements() {
        // Chat elements
        this.chatMessages = document.getElementById('chatMessages');
        this.messageInput = document.getElementById('messageInput');
        this.sendBtn = document.getElementById('sendBtn');
        this.voiceBtn = document.getElementById('voiceBtn');
        this.clearBtn = document.getElementById('clearChat');
        
        // Sidebar elements
        this.goalsList = document.getElementById('goalsList');
        this.expensesChart = document.getElementById('expensesPieChart');
        
        // Modal elements
        this.profileModal = document.getElementById('profileModal');
        this.goalModal = document.getElementById('goalModal');
        this.analyticsModal = document.getElementById('analyticsModal');
        
        // Profile elements
        this.monthlyIncome = document.getElementById('monthlyIncome');
        this.monthlyExpenses = document.getElementById('monthlyExpenses');
        this.riskTolerance = document.getElementById('riskTolerance');
        this.saveProfile = document.getElementById('saveProfile');
        
        // Goal elements
        this.goalName = document.getElementById('goalName');
        this.goalCost = document.getElementById('goalCost');
        this.goalTimeline = document.getElementById('goalTimeline');
        this.currentSavings = document.getElementById('currentSavings');
        this.saveGoal = document.getElementById('saveGoal');
        
        // Other elements
        this.recordingIndicator = document.getElementById('recordingIndicator');
        this.closeModal = document.querySelectorAll('.close');
    }

    setupEventListeners() {
        // Chat functionality
        this.sendBtn.addEventListener('click', () => this.sendMessage());
        this.messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                this.sendMessage();
            }
        });

        this.messageInput.addEventListener('input', () => {
            this.messageInput.style.height = 'auto';
            this.messageInput.style.height = this.messageInput.scrollHeight + 'px';
        });

        this.voiceBtn.addEventListener('click', () => this.toggleRecording());
        this.clearBtn.addEventListener('click', () => this.clearChat());

        // Modal functionality
        document.getElementById('profileBtn').addEventListener('click', () => this.openModal('profileModal'));
        document.getElementById('goalsBtn').addEventListener('click', () => this.openModal('goalModal'));
        document.getElementById('analyticsBtn').addEventListener('click', () => this.openModal('analyticsModal'));
        document.getElementById('addGoalBtn').addEventListener('click', () => this.openModal('goalModal'));

        // Close modals
        this.closeModal.forEach(closeBtn => {
            closeBtn.addEventListener('click', (e) => {
                const modal = e.target.closest('.modal');
                modal.style.display = 'none';
            });
        });

        // Save profile
        this.saveProfile.addEventListener('click', () => this.saveUserProfile());
        this.saveGoal.addEventListener('click', () => this.addFinancialGoal());

        // Close modals on outside click
        window.addEventListener('click', (e) => {
            if (e.target.classList.contains('modal')) {
                e.target.style.display = 'none';
            }
        });

        // Socket events
        this.socket.on('chat_initialized', (data) => {
            this.sessionId = data.sessionId;
            console.log('Bank chat initialized with session:', this.sessionId);
        });

        this.socket.on('ai_response', (data) => {
            this.hideTypingIndicator();
            this.addMessage(data.message, 'ai');
            if (data.transcribedText) {
                this.addMessage(`üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: "${data.transcribedText}"`, 'system');
            }
        });

        this.socket.on('goal_analysis', (data) => {
            this.displayGoalAnalysis(data.analysis);
        });

        this.socket.on('expense_analysis', (data) => {
            this.displayExpenseAnalysis(data.analysis);
        });

        this.socket.on('product_recommendations', (data) => {
            this.displayProductRecommendations(data.recommendations);
        });

        this.socket.on('product_search_results', (data) => {
            this.displayProductSearchResults(data.results, data.query);
        });

        this.socket.on('product_details', (data) => {
            this.displayProductDetails(data.product);
        });

        this.socket.on('product_categories', (data) => {
            this.displayProductCategories(data.categories, data.stats);
        });

        this.socket.on('chat_cleared', () => {
            this.clearChatUI();
        });

        this.socket.on('error', (data) => {
            this.showError(data.message);
        });
    }

    initializeChat() {
        this.socket.emit('init_chat');
    }

    sendMessage() {
        const message = this.messageInput.value.trim();
        if (!message) return;

        this.addMessage(message, 'user');
        this.messageInput.value = '';
        this.messageInput.style.height = 'auto';
        
        this.showTypingIndicator();
        
        this.socket.emit('send_message', {
            message: message,
            sessionId: this.sessionId,
            context: 'financial_planning'
        });
    }

    addMessage(content, type) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${type}-message`;

        const avatar = document.createElement('div');
        avatar.className = 'message-avatar';
        
        if (type === 'user') {
            avatar.innerHTML = '<i class="fas fa-user"></i>';
        } else if (type === 'ai') {
            avatar.innerHTML = '<i class="fas fa-mosque"></i>';
        } else if (type === 'system') {
            avatar.innerHTML = '<i class="fas fa-info-circle"></i>';
        }

        const messageContent = document.createElement('div');
        messageContent.className = 'message-content';
        messageContent.innerHTML = `<p>${this.formatMessage(content)}</p>`;

        messageDiv.appendChild(avatar);
        messageDiv.appendChild(messageContent);

        this.chatMessages.appendChild(messageDiv);
        this.scrollToBottom();
    }

    formatMessage(content) {
        return content
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            .replace(/\*(.*?)\*/g, '<em>$1</em>')
            .replace(/`(.*?)`/g, '<code>$1</code>')
            .replace(/\n/g, '<br>');
    }

    showTypingIndicator() {
        const typingDiv = document.createElement('div');
        typingDiv.className = 'message ai-message typing-indicator';
        typingDiv.id = 'typing-indicator';
        
        typingDiv.innerHTML = `
            <div class="message-avatar">
                <i class="fas fa-mosque"></i>
            </div>
            <div class="message-content">
                <div class="typing-dots">
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                </div>
            </div>
        `;

        this.chatMessages.appendChild(typingDiv);
        this.scrollToBottom();
    }

    hideTypingIndicator() {
        const typingIndicator = document.getElementById('typing-indicator');
        if (typingIndicator) {
            typingIndicator.remove();
        }
    }

    async toggleRecording() {
        if (!this.isRecording) {
            await this.startRecording();
        } else {
            this.stopRecording();
        }
    }

    async startRecording() {
        try {
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            this.mediaRecorder = new MediaRecorder(stream);
            this.audioChunks = [];

            this.mediaRecorder.ondataavailable = (event) => {
                this.audioChunks.push(event.data);
            };

            this.mediaRecorder.onstop = () => {
                const audioBlob = new Blob(this.audioChunks, { type: 'audio/wav' });
                this.sendAudioMessage(audioBlob);
                stream.getTracks().forEach(track => track.stop());
            };

            this.mediaRecorder.start();
            this.isRecording = true;
            this.voiceBtn.classList.add('recording');
            this.recordingIndicator.classList.add('show');
            
        } catch (error) {
            console.error('Error starting recording:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É');
        }
    }

    stopRecording() {
        if (this.mediaRecorder && this.isRecording) {
            this.mediaRecorder.stop();
            this.isRecording = false;
            this.voiceBtn.classList.remove('recording');
            this.recordingIndicator.classList.remove('show');
        }
    }

    sendAudioMessage(audioBlob) {
        const reader = new FileReader();
        reader.onload = () => {
            const audioData = reader.result.split(',')[1];
            
            this.addMessage('üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', 'user');
            this.showTypingIndicator();
            
            this.socket.emit('send_audio', {
                audioData: audioData,
                sessionId: this.sessionId
            });
        };
        reader.readAsDataURL(audioBlob);
    }

    clearChat() {
        this.socket.emit('clear_chat', this.sessionId);
    }

    clearChatUI() {
        this.chatMessages.innerHTML = `
            <div class="welcome-message">
                <div class="message ai-message">
                    <div class="message-avatar">
                        <i class="fas fa-mosque"></i>
                    </div>
                    <div class="message-content">
                        <h3>–ê—Å-—Å–∞–ª—è–º—É –∞–ª–µ–π–∫—É–º! üëã</h3>
                        <p>–ß–∞—Ç –æ—á–∏—â–µ–Ω. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å –≤–∞—à–∏–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏?</p>
                    </div>
                </div>
            </div>
        `;
    }

    // Modal functions
    openModal(modalId) {
        const modal = document.getElementById(modalId);
        modal.style.display = 'block';
        
        if (modalId === 'analyticsModal') {
            this.updateAnalytics();
        }
    }

    // Profile functions
    saveUserProfile() {
        this.userProfile = {
            income: parseInt(this.monthlyIncome.value) || 0,
            expenses: this.userProfile.expenses,
            goals: this.userProfile.goals,
            riskTolerance: this.riskTolerance.value
        };

        this.socket.emit('update_profile', {
            profile: this.userProfile,
            sessionId: this.sessionId
        });

        this.profileModal.style.display = 'none';
        this.addMessage('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.', 'system');
    }

    // Goal functions
    addFinancialGoal() {
        const goal = {
            name: this.goalName.value,
            cost: parseInt(this.goalCost.value) || 0,
            timeline: parseInt(this.goalTimeline.value) || 12,
            currentSavings: parseInt(this.currentSavings.value) || 0,
            type: this.goalName.value.toLowerCase()
        };

        this.userProfile.goals.push(goal);
        this.updateGoalsList();
        
        this.socket.emit('analyze_goal', {
            goal: goal,
            sessionId: this.sessionId
        });

        this.goalModal.style.display = 'none';
        this.clearGoalForm();
    }

    clearGoalForm() {
        this.goalName.value = '';
        this.goalCost.value = '';
        this.goalTimeline.value = '';
        this.currentSavings.value = '';
    }

    updateGoalsList() {
        this.goalsList.innerHTML = '';
        
        this.userProfile.goals.forEach(goal => {
            const progress = Math.min((goal.currentSavings / goal.cost) * 100, 100);
            
            const goalItem = document.createElement('div');
            goalItem.className = 'goal-item';
            goalItem.innerHTML = `
                <div class="goal-icon">${this.getGoalIcon(goal.type)}</div>
                <div class="goal-info">
                    <div class="goal-name">${goal.name}</div>
                    <div class="goal-progress">
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${progress}%"></div>
                        </div>
                        <span class="progress-text">${progress.toFixed(1)}%</span>
                    </div>
                </div>
            `;
            
            this.goalsList.appendChild(goalItem);
        });
    }

    getGoalIcon(goalType) {
        const icons = {
            '–∫–≤–∞—Ä—Ç–∏—Ä–∞': 'üè†',
            '–¥–æ–º': 'üè°',
            '–∞–≤—Ç–æ–º–æ–±–∏–ª—å': 'üöó',
            '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': 'üéì',
            '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ': '‚úàÔ∏è',
            '—Å–≤–∞–¥—å–±–∞': 'üíí',
            '–æ–ø–µ—Ä–∞—Ü–∏—è': 'üè•'
        };
        return icons[goalType] || 'üéØ';
    }

    displayGoalAnalysis(analysis) {
        const message = `
            <h4>üìä –ê–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏</h4>
            <p><strong>–°—Ç–æ–∏–º–æ—Å—Ç—å —Ü–µ–ª–∏:</strong> ${analysis.goalCost.toLocaleString()} —Ç–µ–Ω–≥–µ</p>
            <p><strong>–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è:</strong> ${analysis.monthlySavings.toLocaleString()} —Ç–µ–Ω–≥–µ</p>
            <p><strong>–í—Ä–µ–º—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</strong> ${analysis.requiredTime} –º–µ—Å—è—Ü–µ–≤</p>
            <p><strong>–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å:</strong> ${analysis.isAchievable ? '‚úÖ –î–æ—Å—Ç–∏–∂–∏–º–æ' : '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏'}</p>
            <h5>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h5>
            <ul>
                ${analysis.recommendations.map(rec => `<li>${rec}</li>`).join('')}
            </ul>
        `;
        
        this.addMessage(message, 'ai');
    }

    displayExpenseAnalysis(analysis) {
        const message = `
            <h4>üí∞ –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤</h4>
            <p><strong>–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã:</strong> ${analysis.totalExpenses.toLocaleString()} —Ç–µ–Ω–≥–µ</p>
            <p><strong>–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> ${analysis.topCategory}</p>
            <h5>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:</h5>
            <ul>
                ${analysis.recommendations.map(rec => `<li>${rec}</li>`).join('')}
            </ul>
        `;
        
        this.addMessage(message, 'ai');
    }

    displayProductRecommendations(recommendations) {
        if (recommendations.length === 0) {
            this.addMessage('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –û–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.', 'ai');
            return;
        }

        let message = '<h4>üè¶ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã</h4>';
        
        recommendations.forEach(rec => {
            const islamicBadge = rec.islamic ? '<span style="background: #4CAF50; color: white; padding: 2px 6px; border-radius: 4px; font-size: 0.8rem;">–•–∞–ª—è–ª—å</span>' : '';
            message += `
                <div style="background: #f8f9fa; padding: 1rem; margin: 0.5rem 0; border-radius: 8px; border-left: 4px solid #1e3c72;">
                    <h5>${rec.name} ${islamicBadge}</h5>
                    <p><strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> ${rec.category}</p>
                    <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${rec.description}</p>
                    <p><strong>–°—Ç–∞–≤–∫–∞:</strong> ${rec.rate}% –≥–æ–¥–æ–≤—ã—Ö</p>
                    <p><strong>–°—É–º–º–∞:</strong> –æ—Ç ${rec.minAmount.toLocaleString()} –¥–æ ${rec.maxAmount.toLocaleString()} ${rec.currency}</p>
                    <p><strong>–°—Ä–æ–∫:</strong> ${rec.term} –º–µ—Å—è—Ü–µ–≤</p>
                    ${rec.conditions ? `<p><strong>–£—Å–ª–æ–≤–∏—è:</strong> ${rec.conditions}</p>` : ''}
                    ${rec.benefits ? `<p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> ${rec.benefits}</p>` : ''}
                </div>
            `;
        });
        
        this.addMessage(message, 'ai');
    }

    displayProductSearchResults(results, query) {
        if (results.length === 0) {
            this.addMessage(`–ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.`, 'ai');
            return;
        }

        let message = `<h4>üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: "${query}"</h4>`;
        message += `<p>–ù–∞–π–¥–µ–Ω–æ ${results.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤:</p>`;
        
        results.forEach(product => {
            const islamicBadge = product.islamic ? '<span style="background: #4CAF50; color: white; padding: 2px 6px; border-radius: 4px; font-size: 0.8rem;">–•–∞–ª—è–ª—å</span>' : '';
            message += `
                <div style="background: #f8f9fa; padding: 1rem; margin: 0.5rem 0; border-radius: 8px; border-left: 4px solid #1e3c72;">
                    <h5>${product.name} ${islamicBadge}</h5>
                    <p><strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> ${product.category}</p>
                    <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${product.description}</p>
                    <p><strong>–°—Ç–∞–≤–∫–∞:</strong> ${product.rate}% –≥–æ–¥–æ–≤—ã—Ö</p>
                    <p><strong>–°—É–º–º–∞:</strong> –æ—Ç ${product.minAmount.toLocaleString()} –¥–æ ${product.maxAmount.toLocaleString()} ${product.currency}</p>
                    <p><strong>–°—Ä–æ–∫:</strong> ${product.term} –º–µ—Å—è—Ü–µ–≤</p>
                </div>
            `;
        });
        
        this.addMessage(message, 'ai');
    }

    displayProductDetails(product) {
        const islamicBadge = product.islamic ? '<span style="background: #4CAF50; color: white; padding: 4px 8px; border-radius: 4px; font-size: 0.9rem;">–•–∞–ª—è–ª—å</span>' : '';
        let message = `
            <h4>üìã –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞</h4>
            <div style="background: #f8f9fa; padding: 1.5rem; margin: 0.5rem 0; border-radius: 8px; border-left: 4px solid #1e3c72;">
                <h5>${product.name} ${islamicBadge}</h5>
                <p><strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> ${product.category}</p>
                <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${product.description}</p>
                <p><strong>–í–∞–ª—é—Ç–∞:</strong> ${product.currency}</p>
                <p><strong>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞:</strong> ${product.minAmount.toLocaleString()} ${product.currency}</p>
                <p><strong>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞:</strong> ${product.maxAmount.toLocaleString()} ${product.currency}</p>
                <p><strong>–°—Ç–∞–≤–∫–∞:</strong> ${product.rate}% –≥–æ–¥–æ–≤—ã—Ö</p>
                <p><strong>–°—Ä–æ–∫:</strong> ${product.term} –º–µ—Å—è—Ü–µ–≤</p>
        `;
        
        if (product.conditions) {
            message += `<p><strong>–£—Å–ª–æ–≤–∏—è:</strong> ${product.conditions}</p>`;
        }
        
        if (product.benefits) {
            message += `<p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> ${product.benefits}</p>`;
        }
        
        if (product.requirements) {
            message += `<p><strong>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</strong> ${product.requirements}</p>`;
        }
        
        message += '</div>';
        
        this.addMessage(message, 'ai');
    }

    displayProductCategories(categories, stats) {
        let message = `
            <h4>üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤</h4>
            <p><strong>–í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:</strong> ${stats.totalProducts}</p>
            <p><strong>–ö–∞—Ç–µ–≥–æ—Ä–∏–π:</strong> ${stats.categories}</p>
            <p><strong>–ò—Å–ª–∞–º—Å–∫–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤:</strong> ${stats.islamicProducts}</p>
            <p><strong>–û–±—ã—á–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤:</strong> ${stats.regularProducts}</p>
            <h5>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</h5>
            <ul>
        `;
        
        categories.forEach(category => {
            message += `<li>${category}</li>`;
        });
        
        message += '</ul>';
        
        this.addMessage(message, 'ai');
    }

    // Analytics functions
    updateAnalytics() {
        this.createIncomeExpenseChart();
        this.createCategoryChart();
        this.createGoalsProgressChart();
        this.updateRecommendations();
    }

    createIncomeExpenseChart() {
        const ctx = document.getElementById('incomeExpenseChart').getContext('2d');
        
        if (this.charts.incomeExpense) {
            this.charts.incomeExpense.destroy();
        }
        
        this.charts.incomeExpense = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ['–î–æ—Ö–æ–¥—ã', '–†–∞—Å—Ö–æ–¥—ã'],
                datasets: [{
                    label: '–°—É–º–º–∞ (—Ç–µ–Ω–≥–µ)',
                    data: [this.userProfile.income, this.userProfile.monthlyExpenses || 0],
                    backgroundColor: ['#4CAF50', '#f44336'],
                    borderColor: ['#45a049', '#d32f2f'],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: '–î–æ—Ö–æ–¥—ã vs –†–∞—Å—Ö–æ–¥—ã'
                    }
                }
            }
        });
    }

    createCategoryChart() {
        const ctx = document.getElementById('categoryChart').getContext('2d');
        
        if (this.charts.category) {
            this.charts.category.destroy();
        }
        
        // Sample data - in real app, this would come from user's expense data
        const categoryData = {
            '–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è': 50000,
            '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': 30000,
            '–ñ–∏–ª—å–µ': 80000,
            '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': 20000,
            '–ó–¥–æ—Ä–æ–≤—å–µ': 15000
        };
        
        this.charts.category = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: Object.keys(categoryData),
                datasets: [{
                    data: Object.values(categoryData),
                    backgroundColor: [
                        '#FF6384',
                        '#36A2EB',
                        '#FFCE56',
                        '#4BC0C0',
                        '#9966FF'
                    ]
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤'
                    }
                }
            }
        });
    }

    createGoalsProgressChart() {
        const ctx = document.getElementById('goalsProgressChart').getContext('2d');
        
        if (this.charts.goalsProgress) {
            this.charts.goalsProgress.destroy();
        }
        
        const goalNames = this.userProfile.goals.map(goal => goal.name);
        const goalProgress = this.userProfile.goals.map(goal => 
            Math.min((goal.currentSavings / goal.cost) * 100, 100)
        );
        
        this.charts.goalsProgress = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: goalNames,
                datasets: [{
                    label: '–ü—Ä–æ–≥—Ä–µ—Å—Å (%)',
                    data: goalProgress,
                    backgroundColor: '#4CAF50',
                    borderColor: '#45a049',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: '–ü—Ä–æ–≥—Ä–µ—Å—Å —Ü–µ–ª–µ–π'
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        max: 100
                    }
                }
            }
        });
    }

    updateRecommendations() {
        const recommendationsList = document.getElementById('recommendationsList');
        const recommendations = [
            '–°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ñ–æ–Ω–¥ –Ω–∞ 3-6 –º–µ—Å—è—Ü–µ–≤ —Ä–∞—Å—Ö–æ–¥–æ–≤',
            '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ª–∞–º—Å–∫–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π',
            '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è',
            '–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞',
            '–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞'
        ];
        
        recommendationsList.innerHTML = recommendations.map(rec => 
            `<div class="recommendation-item">${rec}</div>`
        ).join('');
    }

    // Load sample data
    loadSampleData() {
        this.userProfile = {
            income: 500000,
            expenses: [
                { category: '–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è', amount: 50000 },
                { category: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', amount: 30000 },
                { category: '–ñ–∏–ª—å–µ', amount: 80000 },
                { category: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', amount: 20000 }
            ],
            goals: [
                { name: '–ö–≤–∞—Ä—Ç–∏—Ä–∞', cost: 15000000, currentSavings: 2000000, timeline: 60, type: '–∫–≤–∞—Ä—Ç–∏—Ä–∞' },
                { name: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', cost: 2000000, currentSavings: 500000, timeline: 24, type: '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ' }
            ],
            riskTolerance: 'moderate'
        };
        
        this.updateGoalsList();
    }

    showError(message) {
        this.addMessage(`‚ùå –û—à–∏–±–∫–∞: ${message}`, 'system');
    }

    scrollToBottom() {
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
document.addEventListener('DOMContentLoaded', () => {
    new BankAssistant();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', (e) => {
    console.error('Global error:', e.error);
});

window.addEventListener('unhandledrejection', (e) => {
    console.error('Unhandled promise rejection:', e.reason);
});
